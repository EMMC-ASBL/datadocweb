"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from uuid import UUID
import environ

from django.core.management.utils import get_random_secret_key

MS_IDENTITY_WEB_INSTALL = True
try:
    from ms_identity_web.configuration import AADConfig
    from ms_identity_web import IdentityWebPython
except Exception:
    MS_IDENTITY_WEB_INSTALL = False

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(
    # set a type and a default value for DEBUG
    DEBUG=(bool, False),
    WEBSITE_HOSTNAME=(str, 'localhost'),
    HTTPS=(bool, False),
    DJANGO_SECRET_KEY=(str, get_random_secret_key())
)
# reading .env file
env.read_env(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG')

ALLOWED_HOSTS = []
if env.str('WEBSITE_HOSTNAME') != 'localhost':
    ALLOWED_HOSTS.append(env.str('WEBSITE_HOSTNAME'))

if env.bool('HTTPS'):
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True

# Application definition

INSTALLED_APPS = [
    'dashboard.apps.DashboardConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'datadocweb.django.apps.DataDocWebConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Config for the datadocweb app
DATADOCWEB = {
    'base_template': 'content.html',
    'triplestore': {
        'ENGINE': 'tempfile',
        'NAME': 'Temporary files',
        'PATH': '{tempdir}/datadocweb/'
    }
    # 'triplestore': {
    #     'ENGINE': 'azure.storage.blob',
    #     'NAME': 'My Blob Storage',
    #     'CONNECTION_STRING': env('AZURE_STORAGE'),
    #     'CONTAINER': env('AZURE_STORAGE_CONTAINER'),
    #     'FOLDER': env('AZURE_STORAGE_FOLDER')
    # }
    # 'triplestore': {
    #     'ENGINE': 'sparqlwrapper',
    #     'NAME': 'My Fuseki Storage',
    #     'BASE_IRI': env('FUSEKI'),
    #     'UPDATE_IRI': env('FUSEKI_UPDATE'),
    #     'USERNAME': env.str('FUSEKI_USR', ''),
    #     'PASSWORD': env.str('FUSEKI_PWD', ''),
    #     'DATABASES': env.str('FUSEKI_DATABASES', '')
    # }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

VALIDATORS = [
    'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    'django.contrib.auth.password_validation.MinimumLengthValidator',
    'django.contrib.auth.password_validation.CommonPasswordValidator',
    'django.contrib.auth.password_validation.NumericPasswordValidator'
]
AUTH_PASSWORD_VALIDATORS = [{'NAME': v} for v in VALIDATORS]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication with Azure AD

MS_IDENTITY_WEB = None
if MS_IDENTITY_WEB_INSTALL:
    AAD_CONFIG = AADConfig.parse_json(file_path=BASE_DIR / 'aad.config.json')
    value = env.str('AAD_CLIENT_ID', '')
    if value:
        AAD_CONFIG.client.client_id = value
    value = env.str('AAD_CLIENT_CREDENTIAL', '')
    if value:
        AAD_CONFIG.client.client_credential = value
    value = env.str('AAD_AUTHORITY', '')
    if value:
        if value.find('http') < 0:
            try:
                uid = UUID(value)
            except ValueError:
                uid = None
            if uid is not None:
                value = 'https://login.microsoftonline.com/' + value
        AAD_CONFIG.client.authority = value
    MS_IDENTITY_WEB = IdentityWebPython(AAD_CONFIG)
    # for rendering 401 or other errors from msal_middleware
    ERROR_TEMPLATE = 'auth/{}.html'
    # add middleware
    MIDDLEWARE.append('ms_identity_web.django.middleware.MsalMiddleware')
